#!/bin/bash
##AUTHORS: koen-github, swiftgame##

# swiftgame@&y2015.06.13.20:14:40&: MAIN_DIR can probably be deleted, clones know what the main git repo dir is. Indeed

CONFIG_FILE=$1
COMMIT_TEXT=$2
MOUNT_EXTERNAL_SERVERS=$3
VERSION="1.0.0"
if [[ $CONFIG_FILE == "" ]]
then
echo 'Usage: auto_sync_git [CONFIG_FILE] [GIT_COMMIT_TEXT] [MOUNT_EXTERNAL_SERVERS/YES/NO]
This program can be used to automatically sync git repositories. 
Use if you do not want any useful git commit text, and just want to sync all your repos.

Note: Config_file must only have root access, or this script can not run

========EXAMPLE CONFIG_FILE========
declare CLONE_DIRS=("/home/koen/gitTestRepo/alltheclones/clone1/mainGit" "/home/koen/gitTestRepo/alltheclones/clone2/mainGit" "/home/koen/gitTestRepo/alltheclones/clone3/mainGit" "/home/koen/gitTestRepo/alltheclones/clone4/mainGit")
declare EXT_SERVERS=("user@host:git/server/dir/" "/mnt/serverMount" "user1@host1:git/server/dir/" "/mnt/serverMount1")'

exit 1
else

FILE_PERMISSION=`stat -c %A  $CONFIG_FILE`
FILE_OWNER=`stat -c %U  $CONFIG_FILE`
USER=`whoami`

if [[ $FILE_OWNER == "$USER" ]]
then
   if [[ $FILE_PERMISSION == "-rw-r--r--" ]]
   then
      FILE_CONTENTS=`cat $CONFIG_FILE`
      ##NOT SAFE, FIND A BETTER WAY TO DO THIS
      eval $FILE_CONTENTS
      else

      echo "Config file does not have right permission, must been set to: -rw-r--r--, or just use chmod 644 to config file"
      exit 1;
      fi
      else
      echo "Config file is not from the user running this script"
      exit 1;
   fi
fi

echo "GIVEN ARGUMENTS: "
echo "CONFIG_FILE: $CONFIG_FILE"
echo "GIT_COMMIT_TEXT: $COMMIT_TEXT"
echo "EXTERNAL_SERVER: $MOUNT_EXTERNAL_SERVERS"


iterator=0
if [[ $MOUNT_EXTERNAL_SERVERS == "YES" ]]
then

echo "MOUNTING EXTERNALS SERVERS"

for ((i=0; i<${#EXT_SERVERS[@]}; i+=2)); do
   sudo sshfs ${EXT_SERVERS[i]} ${EXT_SERVERS[i+1]}
   EXIT_CODE=`echo $?`
   if [[ $EXIT_CODE == 1 ]] #is a mountpoint 
    then
     echo "Couldn't mount server ${EXT_SERVERS[i]} to mountpoint ${EXT_SERVERS[i+1]}"
	exit 1
   fi
done

fi

##Loop through every clone directory
for i in "${CLONE_DIRS[@]}"
do
   cd $i
echo "=========CURRENT DIRECTORY===== `pwd`"
   git pull
   EXIT_CODE=`echo $?`
   if [[ $EXIT_CODE == 1 ]] 
   then
	echo "======================================================="
	echo "Something went wrong, exiting script. Please check log"
	echo "FULL REPO DIR: $i"
	echo "======================================================="
	exit 1;
   fi
   git add . 
   git commit -m "$COMMIT_TEXT"
   git push
   echo "Done with $i" 
   # or do whatever with individual element of the array
done

##Update every clone one last time, just to be sure.
for i in "${CLONE_DIRS[@]}"
do
   cd $i
echo "=========CURRENT DIRECTORY===== `pwd`"
   git pull
   EXIT_CODE=`echo $?`
   if [[ $EXIT_CODE == 1 ]] 
   then
	echo "Something went wrong, exiting script. Please check log"
	exit 1;
   fi
done

echo "If you're not sure everything is up to date, run this script again. "

exit 0; #exit if everything went well


